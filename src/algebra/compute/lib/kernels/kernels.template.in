#include "algebra/compute/lib/kernels/kernels.hpp"

karu::algebra::compute::Program* radix_sort_program = nullptr;
karu::algebra::compute::Program* array_scan_program = nullptr;
karu::algebra::compute::Program* array_reduce_program = nullptr;

karu::algebra::compute::Kernel* radix_sort_int_to_int_prefix_sum_kernel = nullptr;
karu::algebra::compute::Kernel* radix_move_int_to_int_elements_kernel = nullptr;
karu::algebra::compute::Kernel* block_scan_kernel = nullptr;
karu::algebra::compute::Kernel* scan_kernel = nullptr;
karu::algebra::compute::Kernel* add_sums_kernel = nullptr;
karu::algebra::compute::Kernel* reduce_kernel = nullptr;
karu::algebra::compute::Kernel* radix_parallel_order_checking_kernel = nullptr;

void create_algebra_lib_kernels()
{
    const char* radix_sort_cl_src = ${RADIX_SORT_CL_KERNEL_SRC};
    const char* scan_cl_src = ${SCAN_CL_KERNEL_SRC};
    const char* reduce_cl_src = ${REDUCE_CL_KERNEL_SRC};

    radix_sort_program = new karu::algebra::compute::Program(radix_sort_cl_src);
    array_scan_program = new karu::algebra::compute::Program(scan_cl_src);
    array_reduce_program = new karu::algebra::compute::Program(reduce_cl_src);

    radix_sort_int_to_int_prefix_sum_kernel = new karu::algebra::compute::Kernel(radix_sort_program, "int_to_int_four_way_prefix_sum_shuffle");
    radix_move_int_to_int_elements_kernel = new karu::algebra::compute::Kernel(radix_sort_program, "move_int_to_int_elements");
    radix_parallel_order_checking_kernel = new karu::algebra::compute::Kernel(radix_sort_program, "parallel_block_order_checking");
    
    block_scan_kernel = new karu::algebra::compute::Kernel(array_scan_program, "block_scan_kernel");
    scan_kernel = new karu::algebra::compute::Kernel(array_scan_program, "small_scan_kernel");
    add_sums_kernel = new karu::algebra::compute::Kernel(array_scan_program, "sum_values");
    
    reduce_kernel = new karu::algebra::compute::Kernel(array_reduce_program, "reduce");
}

void destroy_algebra_lib_kernels()
{
    if(add_sums_kernel)
        delete add_sums_kernel;
    if(scan_kernel)
        delete scan_kernel;
    if(block_scan_kernel)
        delete block_scan_kernel;
    if(radix_move_int_to_int_elements_kernel)
        delete radix_move_int_to_int_elements_kernel;
    if(radix_sort_int_to_int_prefix_sum_kernel)
        delete radix_sort_int_to_int_prefix_sum_kernel;
    if(array_scan_program)
        delete array_scan_program;
    if(radix_sort_program)
        delete radix_sort_program;
}

